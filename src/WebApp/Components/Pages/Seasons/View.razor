@page "/seasons/{Id:int}"
@using QLStats.Domain.Enums
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Season #@Id | QLStats</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/seasons">Seasons</a></li>
        <li class="breadcrumb-item active" aria-current="page">@Season?.ToString()</li>
        <li class="breadcrumb-item"><a href="/seasons/@Id/edit">Edit</a></li>
    </ol>
</nav>

@if (!string.IsNullOrWhiteSpace(Season?.Name))
{
    <h1>@Season.Name</h1>
}

@if (Matches is not null && Season is not null)
{
    <div class="row">
        <div class="col-md-2">
            <div class="card">
                <div class="card-header">
                    Top Scorers
                </div>
                <div class="card-body p-0">
                    <table class="table table-hover table-sm mb-0 table-bordered">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Player</th>
                                <th>Pts</th>
                                <th>Diff</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var topScorer in TopScorers)
                            {
                                <tr>
                                    <td>@topScorer.Place</td>
                                    <td>@topScorer.Player.Name</td>
                                    <td>@topScorer.TotalPts</td>
                                    <td>
                                        @{
                                            var aheadTotalPts = TopScorers.FirstOrDefault(x => x.Place == topScorer.Place - 1).TotalPts;
                                        }
                                        @if (aheadTotalPts > 0)
                                        {
                                            <span>@(topScorer.TotalPts - aheadTotalPts)</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card">
                <div class="card-header">
                    Top Fallers
                </div>
                <div class="card-body p-0">
                    <table class="table table-hover table-sm mb-0 table-bordered">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Player</th>
                                <th>Falls</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var topScorer in TopFallers)
                            {
                                <tr>
                                    <td>@topScorer.Place</td>
                                    <td>@topScorer.Player.Name</td>
                                    <td>@topScorer.TotalFalls</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div>
                <MudChart ChartType="ChartType.Line"
                ChartSeries="@Series"
                @bind-SelectedIndex="Index"
                Width="100%"
                Height="500px"
                ChartOptions="@Options" />
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            Matches
        </div>
        <div class="card-body p-0">
            <table class="table table-hover table-sm mb-0 table-bordered">
                <thead>
                    <tr>
                        <th>Time</th>
                        <th>Map</th>
                        <th>Red</th>
                        <th>Blue</th>
                        @foreach (var player in Players)
                        {
                            <th>@player.Name</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var match in Matches)
                    {
                        <tr>
                            <td>@match.PlayedAt.ToString("yyyy.MM.dd HH:mm")</td>
                            <td>@match.Map</td>
                            <td class="text-end">
                                @match.TeamRedScore
                                <span style="color: Tomato;">
                                    <i class="fa-solid fa-square"></i>
                                </span>
                            </td>
                            <td class="text-end">
                                @match.TeamBlueScore
                                <span style="color: Dodgerblue;">
                                    <i class="fa-solid fa-square"></i>
                                </span>
                            </td>
                            @foreach (var player in Players)
                            {
                                var playerStats = match.PlayerStats
                                    .FirstOrDefault(x => x.PlayerId == player.Id);
                                var background = string.Empty;
                                if (playerStats?.Team == Team.Red)
                                {
                                    background = "Tomato";
                                }
                                else if (playerStats?.Team == Team.Blue)
                                {
                                    background = "Dodgerblue";
                                }

                                <td class="text-end">
                                    <b>@(playerStats?.CalculatePtsFor(Season) ?? 0)</b>
                                    <span style="color: @background;">
                                        <i class="fa-solid fa-square"></i>
                                    </span>
                                    <span class="text-secondary">
                                        @if (playerStats != null)
                                        {
                                            @if(Season.DamageForOnePts > 0)
                                            {
                                                <br />
                                                @(playerStats.DamageDealt)
                                                <span> (+</span>
                                                @(Math.Floor(playerStats.DamageDealt / Season.DamageForOnePts.Value))
                                                <span>)</span>
                                                <i class="fa-solid fa-bolt"></i>
                                            }

                                            @if (Season.PtsPerMedal > 0)
                                            {
                                                <br />
                                                @(playerStats.MedalsTotal)
                                                <span> (+</span>
                                                @(Season.PtsPerMedal * playerStats.MedalsTotal)
                                                <span>)</span>
                                                <i class="fa-solid fa-medal"></i>
                                            }

                                            @if (Season.PtsPerKill > 0)
                                            {
                                                <br />
                                                @(playerStats.Kills)
                                                <span> (+</span>
                                                @(Season.PtsPerKill * playerStats.Kills)
                                                <span>)</span>
                                                <i class="fa-solid fa-skull"></i>
                                            }

                                            <br />
                                            @(playerStats.TeamScore)
                                            <span> (+</span>
                                            @(Season.PtsForClanArenaRoundWin * playerStats.TeamScore)
                                            <span>)</span>
                                            <i class="fa-solid fa-circle"></i>

                                            @if (playerStats.Win)
                                            {
                                                <br />
                                                <span>(+</span>
                                                @(Season.PtsForClanArenaMatchWin)
                                                <span>)</span>
                                                <i class="fa-solid fa-trophy"></i>
                                            }

                                            @if (Season.PtsPerSuicide != 0 && playerStats.Suicides > 0)
                                            {
                                                <br />
                                                <span>(-</span>
                                                @(playerStats.Suicides)
                                                <span>)</span>
                                                <i class="fa-solid fa-person-falling"></i>
                                            }
                                        }
                                    </span>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    public Season? Season { get; set; } = new();

    List<Match>? Matches = null;
    List<Player> Players = [];
    List<(Player Player, decimal TotalPts, int Place)> TopScorers = [];
    List<(Player Player, decimal TotalFalls, int Place)> TopFallers = [];

    private int Index = -1;
    public ChartOptions Options = new ChartOptions();
    public List<ChartSeries> Series = [];

    private Timer? _pollingTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        StartPolling();
    }

    private void StartPolling()
    {
        _pollingTimer = new Timer(async _ =>
        {
            await LoadDataAsync();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    private async Task LoadDataAsync()
    {
        if (Id == null)
        {
            NavigationManager.NavigateTo("/seasons");
            return;
        }

        try
        {
            Season = await Context.Seasons.AsNoTracking().FirstOrDefaultAsync(x => x.Id == Id);

            if (Season == null)
            {
                NavigationManager.NavigateTo("/seasons");
                return;
            }

            Matches = await Context.Matches
                .AsNoTracking()
                .AsSplitQuery()
                .Include(x => x.PlayerStats).ThenInclude(x => x.Player)
                .Where(x =>
                    x.PlayedAt.Date >= Season.StartsAt.Date &&
                    x.PlayedAt.Date <= Season.EndsAt.Date &&
                    x.GameType == "CA")
                .OrderByDescending(x => x.PlayedAt)
                .ToListAsync();

            Players = Matches.SelectMany(x => x.PlayerStats)
                .GroupBy(x => x.PlayerId)
                .Select(x => x.First().Player)
                .OrderBy(x => x.Name)
                .ToList();

            TopScorers.Clear();
            TopFallers.Clear();
            Series.Clear();
            foreach (var player in Players)
            {
                double runningTotal = 0;
                double totalFalls = 0;
                Series.Add(new ChartSeries
                    {
                        Name = player.Name,
                        Data = Matches.OrderBy(x => x.PlayedAt).Select(x =>
                        {
                            var stats = x.PlayerStats
                            .Where(x => x.Score > 0).FirstOrDefault(x => x.PlayerId == player.Id);
                            runningTotal += (double?)stats?.CalculatePtsFor(Season) ?? 0;
                            totalFalls += stats?.Suicides ?? 0;
                            return runningTotal;
                        }).ToArray()
                    });
                TopScorers.Add(new(player, (decimal)runningTotal, 0));
                TopFallers.Add(new(player, (decimal)totalFalls, 0));
            }

            TopScorers = TopScorers
                .OrderByDescending(x => x.TotalPts)
                .Select((x, i) => (x.Player, x.TotalPts, i + 1))
                .ToList();

            TopFallers = TopFallers
                .OrderByDescending(x => x.TotalFalls)
                .Select((x, i) => (x.Player, x.TotalFalls, i + 1))
                .ToList();
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/seasons");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_pollingTimer is not null)
        {
            await _pollingTimer.DisposeAsync();
        }
    }
}
